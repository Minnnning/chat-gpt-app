{"ast":null,"code":"var _jsxFileName = \"/Users/minnnning/Desktop/chat-gpt-app/src/components/GptChatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GptChatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const API_KEY = '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';\n  const API_URL = 'https://api.openai.com/v1/engines/davinci-codex/completions';\n  useEffect(() => {\n    setMessages([{\n      text: '안녕하세요! 무엇을 도와드릴까요?',\n      isBot: true\n    }]);\n  }, []);\n  const handleInputChange = event => {\n    setInput(event.target.value);\n  };\n  const handleInputKeyPress = async event => {\n    if (event.key === 'Enter' && input !== '') {\n      const userMessage = {\n        text: input,\n        isBot: false\n      };\n      setMessages([...messages, userMessage]);\n      setInput('');\n      const prompt = messages.map(message => {\n        return message.isBot ? `bot: ${message.text}` : `user: ${message.text}`;\n      }).join('\\n') + `\\nbot: `;\n      const response = await axios.post(API_URL, {\n        prompt: prompt,\n        max_tokens: 50,\n        n: 1,\n        stop: ['\\n', 'user:', 'bot:']\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${API_KEY}`\n        }\n      });\n      const botMessage = {\n        text: response.data.choices[0].text.trim(),\n        isBot: true\n      };\n      setMessages([...messages, botMessage]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '400px',\n        overflowY: 'scroll'\n      },\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '10px'\n        },\n        children: message.isBot ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Bot:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 35\n          }, this), \" \", message.text]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 30\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"You:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 75\n          }, this), \" \", message.text]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 70\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: input,\n      onChange: handleInputChange,\n      onKeyPress: handleInputKeyPress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(GptChatbot, \"9O8vdW2/zxnqNWKJ7NIr/2i0F2U=\");\n_c = GptChatbot;\nexport default GptChatbot;\nvar _c;\n$RefreshReg$(_c, \"GptChatbot\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","GptChatbot","_s","messages","setMessages","input","setInput","API_KEY","API_URL","text","isBot","handleInputChange","event","target","value","handleInputKeyPress","key","userMessage","prompt","map","message","join","response","post","max_tokens","n","stop","headers","botMessage","data","choices","trim","children","style","height","overflowY","index","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onKeyPress","_c","$RefreshReg$"],"sources":["/Users/minnnning/Desktop/chat-gpt-app/src/components/GptChatbot.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst GptChatbot = () => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n\n  const API_KEY = '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';\n  const API_URL = 'https://api.openai.com/v1/engines/davinci-codex/completions';\n  \n  useEffect(() => {\n    setMessages([{ text: '안녕하세요! 무엇을 도와드릴까요?', isBot: true }]);\n  }, []);\n\n  const handleInputChange = (event) => {\n    setInput(event.target.value);\n  };\n\n  const handleInputKeyPress = async (event) => {\n    if (event.key === 'Enter' && input !== '') {\n      const userMessage = { text: input, isBot: false };\n      setMessages([...messages, userMessage]);\n      setInput('');\n\n      const prompt = messages.map((message) => {\n        return message.isBot ? `bot: ${message.text}` : `user: ${message.text}`;\n      }).join('\\n') + `\\nbot: `;\n\n      const response = await axios.post(API_URL, {\n        prompt: prompt,\n        max_tokens: 50,\n        n: 1,\n        stop: ['\\n', 'user:', 'bot:']\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${API_KEY}`\n        }\n      });\n\n      const botMessage = { text: response.data.choices[0].text.trim(), isBot: true };\n      setMessages([...messages, botMessage]);\n    }\n  };\n\n  return (\n    <div>\n      <div style={{ height: '400px', overflowY: 'scroll' }}>\n        {messages.map((message, index) => (\n          <div key={index} style={{ marginBottom: '10px' }}>\n            {message.isBot ? <div><b>Bot:</b> {message.text}</div> : <div><b>You:</b> {message.text}</div>}\n          </div>\n        ))}\n      </div>\n      <input type=\"text\" value={input} onChange={handleInputChange} onKeyPress={handleInputKeyPress} />\n    </div>\n  );\n};\n\nexport default GptChatbot;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMW,OAAO,GAAG,qDAAqD;EACrE,MAAMC,OAAO,GAAG,6DAA6D;EAE7EX,SAAS,CAAC,MAAM;IACdO,WAAW,CAAC,CAAC;MAAEK,IAAI,EAAE,oBAAoB;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC,CAAC;EAC5D,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,iBAAiB,GAAIC,KAAK,IAAK;IACnCN,QAAQ,CAACM,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAC9B,CAAC;EAED,MAAMC,mBAAmB,GAAG,MAAOH,KAAK,IAAK;IAC3C,IAAIA,KAAK,CAACI,GAAG,KAAK,OAAO,IAAIX,KAAK,KAAK,EAAE,EAAE;MACzC,MAAMY,WAAW,GAAG;QAAER,IAAI,EAAEJ,KAAK;QAAEK,KAAK,EAAE;MAAM,CAAC;MACjDN,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEc,WAAW,CAAC,CAAC;MACvCX,QAAQ,CAAC,EAAE,CAAC;MAEZ,MAAMY,MAAM,GAAGf,QAAQ,CAACgB,GAAG,CAAEC,OAAO,IAAK;QACvC,OAAOA,OAAO,CAACV,KAAK,GAAI,QAAOU,OAAO,CAACX,IAAK,EAAC,GAAI,SAAQW,OAAO,CAACX,IAAK,EAAC;MACzE,CAAC,CAAC,CAACY,IAAI,CAAC,IAAI,CAAC,GAAI,SAAQ;MAEzB,MAAMC,QAAQ,GAAG,MAAMxB,KAAK,CAACyB,IAAI,CAACf,OAAO,EAAE;QACzCU,MAAM,EAAEA,MAAM;QACdM,UAAU,EAAE,EAAE;QACdC,CAAC,EAAE,CAAC;QACJC,IAAI,EAAE,CAAC,IAAI,EAAE,OAAO,EAAE,MAAM;MAC9B,CAAC,EAAE;QACDC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAG,UAASpB,OAAQ;QACrC;MACF,CAAC,CAAC;MAEF,MAAMqB,UAAU,GAAG;QAAEnB,IAAI,EAAEa,QAAQ,CAACO,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACrB,IAAI,CAACsB,IAAI,EAAE;QAAErB,KAAK,EAAE;MAAK,CAAC;MAC9EN,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEyB,UAAU,CAAC,CAAC;IACxC;EACF,CAAC;EAED,oBACE5B,OAAA;IAAAgC,QAAA,gBACEhC,OAAA;MAAKiC,KAAK,EAAE;QAAEC,MAAM,EAAE,OAAO;QAAEC,SAAS,EAAE;MAAS,CAAE;MAAAH,QAAA,EAClD7B,QAAQ,CAACgB,GAAG,CAAC,CAACC,OAAO,EAAEgB,KAAK,kBAC3BpC,OAAA;QAAiBiC,KAAK,EAAE;UAAEI,YAAY,EAAE;QAAO,CAAE;QAAAL,QAAA,EAC9CZ,OAAO,CAACV,KAAK,gBAAGV,OAAA;UAAAgC,QAAA,gBAAKhC,OAAA;YAAAgC,QAAA,EAAG;UAAI;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAI,KAAC,EAACrB,OAAO,CAACX,IAAI;QAAA;UAAA6B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAO,gBAAGzC,OAAA;UAAAgC,QAAA,gBAAKhC,OAAA;YAAAgC,QAAA,EAAG;UAAI;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAI,KAAC,EAACrB,OAAO,CAACX,IAAI;QAAA;UAAA6B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAO,GADtFL,KAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAGhB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACE,eACNzC,OAAA;MAAO0C,IAAI,EAAC,MAAM;MAAC5B,KAAK,EAAET,KAAM;MAACsC,QAAQ,EAAEhC,iBAAkB;MAACiC,UAAU,EAAE7B;IAAoB;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC7F;AAEV,CAAC;AAACvC,EAAA,CAtDID,UAAU;AAAA4C,EAAA,GAAV5C,UAAU;AAwDhB,eAAeA,UAAU;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}