{"ast":null,"code":"var _jsxFileName = \"/Users/minnnning/Desktop/chat-gpt-app/src/components/GptChatbot.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  async function generateResponse(prompt) {\n    const response = await axios.post(\"https://api.openai.com/v1/engines/davinci-codex/completions\", {\n      prompt: prompt,\n      max_tokens: 50,\n      n: 1,\n      stop: \"\\n\",\n      temperature: 0.7,\n      model: \"text-davinci-002\"\n    }, {\n      headers: {\n        Authorization: `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return response.data.choices[0].text.trim();\n  }\n  async function handleSubmit(event) {\n    event.preventDefault(); // 폼의 기본 동작을 막음\n\n    const userInput = inputValue; // 사용자의 입력 메시지를 변수에 저장\n    setInputValue(\"\"); // 입력폼을 초기화\n\n    // 사용자의 입력 메시지를 메시지 배열에 추가\n    setMessages(messages => [...messages, {\n      sender: \"user\",\n      text: userInput\n    }]);\n\n    // 챗봇의 응답을 생성\n    const botResponse = await generateResponse(userInput);\n\n    // 챗봇의 응답을 메시지 배열에 추가\n    setMessages(messages => [...messages, {\n      sender: \"bot\",\n      text: botResponse\n    }]);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(Message, {\n        sender: message.sender,\n        text: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: e => setInputValue(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"0kA3P91N/+BBulfy0KZW3918pgc=\");\n_c = Chatbot;\nfunction Message(_ref) {\n  let {\n    sender,\n    text\n  } = _ref;\n  // 각각의 메시지를 출력하는 컴포넌트\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `message ${sender}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-body\",\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_c2 = Message;\nexport default Chatbot;\nvar _c, _c2;\n$RefreshReg$(_c, \"Chatbot\");\n$RefreshReg$(_c2, \"Message\");","map":{"version":3,"names":["useState","axios","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","inputValue","setInputValue","generateResponse","prompt","response","post","max_tokens","n","stop","temperature","model","headers","Authorization","process","env","REACT_APP_OPENAI_API_KEY","data","choices","text","trim","handleSubmit","event","preventDefault","userInput","sender","botResponse","className","children","map","message","index","Message","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","e","target","_c","_ref","_c2","$RefreshReg$"],"sources":["/Users/minnnning/Desktop/chat-gpt-app/src/components/GptChatbot.jsx"],"sourcesContent":["import { useState } from \"react\";\nimport axios from \"axios\";\n\nfunction Chatbot() {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n\n  async function generateResponse(prompt) {\n    const response = await axios.post(\n      \"https://api.openai.com/v1/engines/davinci-codex/completions\",\n      {\n        prompt: prompt,\n        max_tokens: 50,\n        n: 1,\n        stop: \"\\n\",\n        temperature: 0.7,\n        model: \"text-davinci-002\"\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n          \"Content-Type\": \"application/json\"\n        }\n      }\n    );\n    return response.data.choices[0].text.trim();\n  }\n\n  async function handleSubmit(event) {\n    event.preventDefault(); // 폼의 기본 동작을 막음\n\n    const userInput = inputValue; // 사용자의 입력 메시지를 변수에 저장\n    setInputValue(\"\"); // 입력폼을 초기화\n\n    // 사용자의 입력 메시지를 메시지 배열에 추가\n    setMessages((messages) => [...messages, { sender: \"user\", text: userInput }]);\n\n    // 챗봇의 응답을 생성\n    const botResponse = await generateResponse(userInput);\n\n    // 챗봇의 응답을 메시지 배열에 추가\n    setMessages((messages) => [...messages, { sender: \"bot\", text: botResponse }]);\n  }\n\n  return (\n    <div className=\"chatbot\">\n      <div className=\"messages\">\n        {/* 메시지 출력 컴포넌트 */}\n        {messages.map((message, index) => (\n          <Message key={index} sender={message.sender} text={message.text} />\n        ))}\n      </div>\n      {/* 입력폼 */}\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" value={inputValue} onChange={(e) => setInputValue(e.target.value)} />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  );\n}\n\nfunction Message({ sender, text }) {\n  // 각각의 메시지를 출력하는 컴포넌트\n  return (\n    <div className={`message ${sender}`}>\n      <div className=\"message-body\">{text}</div>\n    </div>\n  );\n}\n\nexport default Chatbot;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}