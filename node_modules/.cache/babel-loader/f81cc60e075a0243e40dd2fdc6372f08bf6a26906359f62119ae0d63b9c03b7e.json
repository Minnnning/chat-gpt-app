{"ast":null,"code":"var _jsxFileName = \"/Users/minnnning/Desktop/chat-gpt-app/src/components/GptChatbot.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  async function generateResponse(prompt) {\n    // 위에서 작성한 generateResponse 함수\n  }\n  async function handleSubmit(event) {\n    // 사용자의 입력 메시지를 처리하고, 챗봇의 응답을 받아와서, 메시지 배열에 추가하는 코드\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(Message, {\n        sender: message.sender,\n        text: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: e => setInputValue(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"0kA3P91N/+BBulfy0KZW3918pgc=\");\n_c = Chatbot;\nfunction Message(_ref) {\n  let {\n    sender,\n    text\n  } = _ref;\n  // 각각의 메시지를 출력하는 컴포넌트\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `message ${sender}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-body\",\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_c2 = Message;\nexport default Chatbot;\nvar _c, _c2;\n$RefreshReg$(_c, \"Chatbot\");\n$RefreshReg$(_c2, \"Message\");","map":{"version":3,"names":["useState","axios","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","inputValue","setInputValue","generateResponse","prompt","handleSubmit","event","className","children","map","message","index","Message","sender","text","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","e","target","_c","_ref","_c2","$RefreshReg$"],"sources":["/Users/minnnning/Desktop/chat-gpt-app/src/components/GptChatbot.jsx"],"sourcesContent":["import { useState } from \"react\";\nimport axios from \"axios\";\n\nfunction Chatbot() {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n\n  async function generateResponse(prompt) {\n    // 위에서 작성한 generateResponse 함수\n  }\n\n  async function handleSubmit(event) {\n    // 사용자의 입력 메시지를 처리하고, 챗봇의 응답을 받아와서, 메시지 배열에 추가하는 코드\n  }\n\n  return (\n    <div className=\"chatbot\">\n      <div className=\"messages\">\n        {/* 메시지 출력 컴포넌트 */}\n        {messages.map((message, index) => (\n          <Message key={index} sender={message.sender} text={message.text} />\n        ))}\n      </div>\n      {/* 입력폼 */}\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" value={inputValue} onChange={(e) => setInputValue(e.target.value)} />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  );\n}\n\nfunction Message({ sender, text }) {\n  // 각각의 메시지를 출력하는 컴포넌트\n  return (\n    <div className={`message ${sender}`}>\n      <div className=\"message-body\">{text}</div>\n    </div>\n  );\n}\n\nexport default Chatbot;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEhD,eAAeU,gBAAgBA,CAACC,MAAM,EAAE;IACtC;EAAA;EAGF,eAAeC,YAAYA,CAACC,KAAK,EAAE;IACjC;EAAA;EAGF,oBACEV,OAAA;IAAKW,SAAS,EAAC,SAAS;IAAAC,QAAA,gBACtBZ,OAAA;MAAKW,SAAS,EAAC,UAAU;MAAAC,QAAA,EAEtBT,QAAQ,CAACU,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBAC3Bf,OAAA,CAACgB,OAAO;QAAaC,MAAM,EAAEH,OAAO,CAACG,MAAO;QAACC,IAAI,EAAEJ,OAAO,CAACI;MAAK,GAAlDH,KAAK;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACpB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACE,eAENtB,OAAA;MAAMuB,QAAQ,EAAEd,YAAa;MAAAG,QAAA,gBAC3BZ,OAAA;QAAOwB,IAAI,EAAC,MAAM;QAACC,KAAK,EAAEpB,UAAW;QAACqB,QAAQ,EAAGC,CAAC,IAAKrB,aAAa,CAACqB,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eACxFtB,OAAA;QAAQwB,IAAI,EAAC,QAAQ;QAAAZ,QAAA,EAAC;MAAI;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAC9B;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACH;AAEV;AAACpB,EAAA,CA3BQD,OAAO;AAAA4B,EAAA,GAAP5B,OAAO;AA6BhB,SAASe,OAAOA,CAAAc,IAAA,EAAmB;EAAA,IAAlB;IAAEb,MAAM;IAAEC;EAAK,CAAC,GAAAY,IAAA;EAC/B;EACA,oBACE9B,OAAA;IAAKW,SAAS,EAAG,WAAUM,MAAO,EAAE;IAAAL,QAAA,eAClCZ,OAAA;MAAKW,SAAS,EAAC,cAAc;MAAAC,QAAA,EAAEM;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAO;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACtC;AAEV;AAACS,GAAA,GAPQf,OAAO;AAShB,eAAef,OAAO;AAAC,IAAA4B,EAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAH,EAAA;AAAAG,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}